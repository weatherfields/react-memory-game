{"version":3,"sources":["images/navGtr.png","images/MustangR500.png","components/Guitar.js","components/layout/Navbar.js","App.js","index.js"],"names":["module","exports","Guitar","props","className","onClick","clickState","id","alt","name","src","image","Navbar","href","navGtrImg","this","currentScore","topScore","navGtrImgR","message","Component","shuffleGuitars","array","i","length","j","Math","floor","random","App","state","guitars","isClicked","document","getElementById","textContent","indexOf","scoreAdjust","setState","concat","GameReset","addScore","Swal","fire","guitarShuffle","shuffledGuitars","map","key","ReactDOM","render"],"mappings":"u0BAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,sMCe5BC,G,MAVA,SAAAC,GAAK,OAClB,yBAAKC,UAAU,aACb,yBAAKA,UAAU,MAAMC,QAAS,kBAAMF,EAAMG,WAAWH,EAAMI,MACzD,yBAAKH,UAAU,iBACb,yBAAKI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,a,yCCkC1BC,G,uLApCX,OACE,yBAAKR,UAAU,qBACb,uBAAGG,GAAG,YAAYM,KAAK,KAAvB,4BAGA,wBAAIN,GAAG,YACL,4BACE,uBAAGM,KAAK,KACN,yBAAKN,GAAG,YAAYG,IAAKI,IAAWN,IAAI,wBAG5C,wBAAID,GAAG,YACL,0BAAMA,GAAG,SAAT,UACUQ,KAAKZ,MAAMa,aADrB,gBACgD,IAC7CD,KAAKZ,MAAMc,WAGhB,4BACE,uBAAGJ,KAAK,KACN,yBAAKN,GAAG,aAAaG,IAAKQ,IAAYV,IAAI,eAIhD,yBAAKD,GAAG,WACN,uBAAGH,UAAU,YAAb,iGAIA,uBAAGA,UAAU,YAAb,0CACA,0BAAMG,GAAG,WAAWQ,KAAKZ,MAAMgB,e,GA/BpBC,c,sBCQrB,SAASC,EAAeC,GACtB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADC,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,KAI3C,OAAOH,E,IA+FMO,E,2MAxFbC,MAAQ,CACNd,aAAc,EACdC,SAAU,EACVc,UACAZ,QAAS,GACTa,UAAW,I,EAGb1B,WAAa,SAAAC,GACM0B,SAASC,eAAe,WAC9BC,YAAc,IACiB,IAAtC,EAAKL,MAAME,UAAUI,QAAQ7B,IAC/B,EAAK8B,cACL,EAAKC,SAAS,CACZN,UAAW,EAAKF,MAAME,UAAUO,OAAOhC,MAGzC,EAAKiC,a,EAITH,YAAc,WACZ,IAAMI,EAAW,EAAKX,MAAMd,aAAe,EAC3C,EAAKsB,SAAS,CACZtB,aAAcyB,EACdtB,QAAS,KAEPsB,GAAY,EAAKX,MAAMb,UACzB,EAAKqB,SAAS,CAAErB,SAAUwB,IAEX,KAAbA,IACF,EAAKH,SACH,CACEtB,aAAc,EACdgB,UAAW,KAEb,WACEjB,KAAKuB,SAAS,CACZN,UAAW,QAKjBU,IAAKC,KAAK,iDAEZ,EAAKC,iB,EAGPJ,UAAY,WACV,EAAKF,SAAS,CACZtB,aAAc,EACdC,SAAU,EAAKa,MAAMb,SACrBe,UAAW,KAGbU,IAAKC,KAAK,2CAEV,EAAKC,iB,EAGPA,cAAgB,WACd,IAAIC,EAAkBxB,EAAeU,GACrC,EAAKO,SAAS,CAAEP,QAASc,K,wEAIjB,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CACE7B,aAAcD,KAAKe,MAAMd,aACzBC,SAAUF,KAAKe,MAAMb,SACrBE,QAASJ,KAAKe,MAAMX,UAErBJ,KAAKe,MAAMC,QAAQe,KAAI,SAAAf,GAAO,OAC7B,kBAAC,EAAD,CACEgB,IAAKhB,EAAQxB,GACbD,WAAY,EAAKA,WACjBsC,cAAe,EAAKA,cACpBrC,GAAIwB,EAAQxB,GACZI,MAAOoB,EAAQpB,gB,GAnFTS,aClBlB4B,IAASC,OAAO,kBAAC,EAAD,MAAShB,SAASC,eAAe,W","file":"static/js/main.c737a922.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/navGtr.f00c7770.png\";","module.exports = __webpack_public_path__ + \"static/media/MustangR500.ddccdd0b.png\";","import React from \"react\";\nimport \"./Guitar.css\";\n\n// return the JSX. Use className to avoid warnings.\n// everything gets wrapped in the parent element .. in this case container. Otherwise the app will FAIL TO LOAD AT ALL.\nconst Guitar = props => (\n  <div className=\"container\">\n    <div className=\"gtr\" onClick={() => props.clickState(props.id)}>\n      <div className=\"gtr-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  </div>\n);\n\nexport default Guitar;\n","import React, { Component } from \"react\";\nimport navGtrImg from \"../../images/navGtr.png\";\nimport navGtrImgR from \"../../images/MustangR500.png\";\nimport \"./Navbar.css\";\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar bg-primary\">\n        <a id=\"gtr-title\" href=\"/\">\n          Guitar Memory Click Game\n        </a>\n        <ul id=\"pinkbear\">\n          <li>\n            <a href=\"/\">\n              <img id=\"navImgGtr\" src={navGtrImg} alt=\"Brown Hummingbird\" />\n            </a>\n          </li>\n          <li id=\"nav-item\">\n            <span id=\"score\">\n              Score: {this.props.currentScore} | Top Score:{\" \"}\n              {this.props.topScore}\n            </span>\n          </li>\n          <li>\n            <a href=\"/\">\n              <img id=\"navImgGtrR\" src={navGtrImgR} alt=\"Mustang\" />\n            </a>\n          </li>\n        </ul>\n        <div id=\"navText\">\n          <p className=\"nav-text\">\n            Click an image to begin! Click all 12 guitars only once to win! One\n            wrong click and you lose!\n          </p>\n          <p className=\"nav-text\">Click a guitar in the header to reset!</p>\n          <span id=\"message\">{this.props.message}</span>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","// import React from 'react'; unused\n// including \"Component\" here instead of after \"extends\" in class based Component\nimport React, { Component } from \"react\";\nimport Guitar from \"./components/Guitar\";\nimport guitars from \"./guitars.json\";\nimport Navbar from \"./components/layout/Navbar\";\n// replace alerts with sweetalert popups\nimport Swal from \"sweetalert2\";\n\nimport \"./App.css\";\n\n// shuffle for loop to randomly shuffle the images.\n// this is something that I need to constantly relearn https://stackoverflow.com/questions/6274339/how-can-i-shuffle-an-array\nfunction shuffleGuitars(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\n// App Class based component. Basically the heart of the entire application. ... as I understand it anyway.\nclass App extends Component {\n  // initialize the default state of App\n\n  state = {\n    currentScore: 0,\n    topScore: 0,\n    guitars,\n    message: \"\",\n    isClicked: []\n  };\n  // when someone clicks an image, change state appropriately\n  clickState = id => {\n    let navbarText = document.getElementById(\"navText\");\n    navbarText.textContent = \"\";\n    if (this.state.isClicked.indexOf(id) === -1) {\n      this.scoreAdjust();\n      this.setState({\n        isClicked: this.state.isClicked.concat(id)\n      });\n    } else {\n      this.GameReset();\n    }\n  };\n  // every time an image is clicked, adjust score/states\n  scoreAdjust = () => {\n    const addScore = this.state.currentScore + 1;\n    this.setState({\n      currentScore: addScore,\n      message: \"\"\n    });\n    if (addScore >= this.state.topScore) {\n      this.setState({ topScore: addScore });\n    }\n    if (addScore === 12) {\n      this.setState(\n        {\n          currentScore: 0,\n          isClicked: []\n        },\n        function() {\n          this.setState({\n            isClicked: []\n          });\n        }\n      );\n      // Swal was a compromise to get some working functionality into the game.\n      Swal.fire(\"Congrats!, You've clicked all of the images!\");\n    }\n    this.guitarShuffle();\n  };\n  // reset score when game ends\n  GameReset = () => {\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      isClicked: []\n    });\n    // Swal was a compromise to get some working functionality into the game.\n    Swal.fire(\"Woops, You've Clicked Wrong! Try Again!\");\n\n    this.guitarShuffle();\n  };\n  // take the shuffled guitar array and update the state\n  guitarShuffle = () => {\n    let shuffledGuitars = shuffleGuitars(guitars);\n    this.setState({ guitars: shuffledGuitars });\n  };\n\n  // render components here ...\n  render() {\n    return (\n      <div>\n        <Navbar\n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore}\n          message={this.state.message}\n        />\n        {this.state.guitars.map(guitars => (\n          <Guitar\n            key={guitars.id}\n            clickState={this.clickState}\n            guitarShuffle={this.guitarShuffle}\n            id={guitars.id}\n            image={guitars.image}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}